#
# kharma executable
#
if (Kokkos_ENABLE_CUDA)
    set(EXE_NAME "kharma.cuda")
elseif(Kokkos_ENABLE_SYCL)
    set(EXE_NAME "kharma.sycl")
else()
    set(EXE_NAME "kharma.host")
endif()

AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/prob EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/coordinates EXE_NAME_SRC)

AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/b_cd EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/b_cleanup EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/b_flux_ct EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/current EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/electrons EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/emhd EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/floors EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/grmhd EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/implicit EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/reductions EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/emhd EXE_NAME_SRC)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/wind EXE_NAME_SRC)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/prob)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/coordinates)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/b_cd)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/b_cleanup)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/b_flux_ct)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/current)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/electrons)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/emhd)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/floors)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/grmhd)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/implicit)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/reductions)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/emhd)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/wind)

add_executable(${EXE_NAME} ${EXE_NAME_SRC})

target_link_libraries(${EXE_NAME} PUBLIC kokkos)
# We actually only need the header
#target_link_libraries(${EXE_NAME} PUBLIC kokkoskernels)
target_link_libraries(${EXE_NAME} PUBLIC parthenon)

# OPTIONS
# These are almost universally performance trade-offs
# TODO is there any way to make compile options less painful in CMake?
option(FUSE_FLUX_KERNELS "Bundle the usual four flux calculation kernels (floors,R,L,apply) into one" ON)
option(FUSE_FLOOR_KERNELS "Bundle applying the floors and ceilings into one kernel" ON)
option(FAST_CARTESIAN "Break operation in curved spacetimes to make Cartesian Minkowski space computations faster" OFF)
if(FUSE_FLUX_KERNELS)
    target_compile_definitions(${EXE_NAME} PUBLIC FUSE_FLUX_KERNELS=1)
else()
    target_compile_definitions(${EXE_NAME} PUBLIC FUSE_FLUX_KERNELS=0)
endif()
if(FUSE_EMF_KERNELS)
    target_compile_definitions(${EXE_NAME} PUBLIC FUSE_EMF_KERNELS=1)
else()
    target_compile_definitions(${EXE_NAME} PUBLIC FUSE_EMF_KERNELS=0)
endif()
if(FUSE_FLOOR_KERNELS)
    target_compile_definitions(${EXE_NAME} PUBLIC FUSE_FLOOR_KERNELS=1)
else()
    target_compile_definitions(${EXE_NAME} PUBLIC FUSE_FLOOR_KERNELS=0)
endif()
if(FAST_CARTESIAN)
    target_compile_definitions(${EXE_NAME} PUBLIC FAST_CARTESIAN=1)
else()
    target_compile_definitions(${EXE_NAME} PUBLIC FAST_CARTESIAN=0)
endif()
# Tracing is added in the command-line call when running  "./make.sh [OPTIONS] trace"
if(TRACE)
    message("Compiling with code tracing (printed FLAGs)")
    target_compile_definitions(${EXE_NAME} PUBLIC TRACE=1)
else()
    target_compile_definitions(${EXE_NAME} PUBLIC TRACE=0)
endif()

# FLAGS
if(CMAKE_BUILD_TYPE)
    if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        message("Debug build")
        target_compile_definitions(${EXE_NAME} PUBLIC DEBUG=1)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
    else()
        message("Explicit non-Debug build")
        target_compile_definitions(${EXE_NAME} PUBLIC DEBUG=0)
    endif()
else()
    message("Implicit non-Debug build")
    target_compile_definitions(${EXE_NAME} PUBLIC DEBUG=0)
endif()

if (Kokkos_ENABLE_HWLOC)
    target_compile_definitions(${EXE_NAME} PUBLIC Kokkos_ENABLE_HWLOC)
    target_link_libraries(${EXE_NAME} PUBLIC hwloc)
endif()

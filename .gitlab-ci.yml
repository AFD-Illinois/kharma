# Continuous Integration testing for KHARMA
# a.k.a did we break the basics?

# Build against a container image
#image:

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Someday all the tests can be executed by
# different runners sharing a configuration
stages:
  - build
  - tests

build:
  stage: build
  script:
    - bash make.sh clean
  artifacts:
    paths:
      - kharma.*
      - make_args

bondi:
  stage: tests
  before_script:
    - cd tests/bondi/
  script:
    - bash run.sh
    - bash check.sh
  artifacts:
    when: always
    paths:
      - tests/bondi/*.png
      - tests/bondi/*.hst
      - tests/bondi/*.txt

mhdmodes:
  stage: tests
  before_script:
    - cd tests/mhdmodes/
  script:
    - bash run.sh
    - bash check.sh
  artifacts:
    when: always
    paths:
      - tests/mhdmodes/*.png
      - tests/mhdmodes/*.hst
      - tests/mhdmodes/*.txt

noh:
  stage: tests
  before_script:
    - cd tests/noh/
  script:
    - bash run.sh
    - bash check.sh
  artifacts:
    when: always
    paths:
      - tests/noh/*.png
      - tests/noh/*.hst

bz_monopole:
  stage: tests
  before_script:
    - cd tests/bz_monopole
  script:
    # Make sure to image whatever actually ran,
    # but fail if it crashed
    - exit_code=0
    - bash run.sh || exit_code=$?
    - bash check.sh
    - exit $exit_code
  artifacts:
    when: always
    paths:
      - tests/bz_monopole/*.png
      - tests/bz_monopole/*.hst

tilt_init:
  stage: tests
  before_script:
    - cd tests/tilt_init
  script:
    - exit_code=0
    - bash run.sh || exit_code=$?
    - bash check.sh
    - exit $exit_code
  artifacts:
    when: always
    paths:
      - tests/tilt_init/*.png
      - tests/tilt_init/*.hst

restart:
  stage: tests
  before_script:
    - cd tests/restart
  script:
    - bash run.sh
    - bash check.sh
  artifacts:
    when: always
    paths:
      - tests/restart/*.png

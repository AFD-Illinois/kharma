# Bondi flow problem, with vertical B
# Structured more like physics than a test, with:
# (low-res) 3D grid
# Floors, flux-corrections when floors are hit
# Transmitting boundary conditions
# Simulation restart files

<parthenon/job>
problem_id = bondi

<parthenon/mesh>
# Full mesh size, no refinement
# Don't bother with xN boundaries for spherical coordinate systems
# KHARMA will automatically place ~5 zones inside the EH
nx1 = 64
nx2 = 64
nx3 = 32

<parthenon/meshblock>
# Split mesh into blocks of this size
# Note you can't split in x3 and still use transmitting boundaries!
nx1 = 64
nx2 = 64
nx3 = 32

<coordinates>
base = ks
transform = mks
a = 0.0
hslope = 0.3
r_out = 30

<parthenon/time>
tlim = 5000.0

<GRMHD>
cfl = 0.9
gamma = 1.666667
reconstruction = weno5

<bondi>
mdot = 1.0
rs = 8.0

<floors>
bsq_over_rho_max = 1e3
bsq_over_u_max = 1e4
rho_min_geom = 1e-6
u_min_geom = 1e-8

<fofc>
on = true

<boundaries>
# Transmitting boundaries, since there will be material at the pole
inner_x2 = transmitting
outer_x2 = transmitting
excise_polar_flux = true
# Allow in material from boundary
check_inflow_outer_x1 = false

<b_field>
solver = face_ct
# Constant pure-vertical field
type = vertical
A0 = 0.1
norm = false

<debug>
verbose = 1
flag_verbose = 0
extra_checks = 1

<driver>
type = kharma
two_sync = true

<parthenon/output0>
file_type = hdf5
dt = 5.0
single_precision_output = false
# Fields not present are silently ignored
variables = prims, pflag, divB, cons.fB

<parthenon/output1>
file_type = rst
dt = 100.0

<parthenon/output2>
file_type = hst
dt = 0.1

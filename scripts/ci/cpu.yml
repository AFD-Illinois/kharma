# CI on CPUs: GCC on CentOS oughta build about anything

image: quay.io/centos/centos:stream9

variables:
  OMP_NUM_THREADS: 8
  OMP_PROC_BIND: "false"
  MPI_EXE: mpirun
  MPI_NUM_PROCS: 2
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  GIT_SUBMODULE_STRATEGY: recursive

### DEFAULT TEST BEHAVIOR ###
default:
  # Be default: install pyharm, then run test in cwd
  # For new tests, write one run.sh script which runs/verifies
  # interleaved, and prints a summary of results.
  before_script:
    - export PATH="$HOME/.local/bin:$PATH"
    - wget -O Miniforge3.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
    - bash Miniforge3.sh -b -p "/home/conda"
    - source "/home/conda/etc/profile.d/conda.sh"
    - conda install h5py
    - git clone https://github.com/AFD-Illinois/pyharm.git /home/pyharm
    - conda activate
    - cd /home/pyharm
    - pip install --user .
    - cd -

# Tests can be executed in parallel,
# but be careful about GPU arch
stages:
  - build
  - tests

# Build, obviously overrides script/artifacts
build:
  stage: build
  variables:
    NPROC: ""
    HOST_ARCH: HSW
  before_script:
    - echo "Skipping pyharm install in build."
  script:
    - export PREFIX_PATH=$PWD/external/hdf5
    - ./make.sh clean hdf5
  artifacts:
    paths:
      - kharma.*
      - make_args

#Run all tests in parallel
tests:
  extends: .default-rules
  stage: tests
  script:
    - cd tests/$TEST
    - ./run.sh
  parallel:
    matrix:
      - TEST: [bondi, bondi_viscous, bz_monopole, emhdmodes, mhdmodes, noh, regrid, reinit, restart, tilt_init, torus_sanity]

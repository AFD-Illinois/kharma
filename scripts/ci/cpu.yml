# CI on CPUs: GCC on CentOS oughta build about anything

image: quay.io/centos/centos:stream9

variables:
  OMP_NUM_THREADS: 8
  OMP_PROC_BIND: "false"
  MPI_EXE: mpirun
  MPI_NUM_PROCS: 2
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  GIT_SUBMODULE_STRATEGY: recursive
  MAMBA_ROOT_PREFIX: /mamba

### DEFAULT TEST BEHAVIOR ###
default:
  tags:
    - public-kharma-runner
  # By default: install pyharm, then run test in cwd
  # For new tests, write one run.sh script which runs/verifies
  # interleaved, and prints a summary of results.
  before_script:
    - dnf -y install hostname environment-modules git mpich fftw bzip2
    - source /etc/profile
    - module load mpi/mpich-x86_64
    - curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
    - eval "$(./bin/micromamba shell hook -s posix)"
    - git clone https://github.com/AFD-Illinois/pyharm.git /pyharm && cd /pyharm
    - micromamba create -y -f environment.yml && micromamba activate pyharm && ./install.sh

# Tests can be executed in parallel
stages:
  - build
  - tests

# Build, obviously overrides script/artifacts
build:
  stage: build
  variables:
    NPROC: 8
    HOST_ARCH: NATIVE
    C_NATIVE: gcc
    CXX_NATIVE: g++
  before_script:
    - dnf -y groupinstall "Development Tools"
    - dnf -y install hostname environment-modules cmake mpich-devel fftw-devel
    - source /etc/profile
    - module load mpi/mpich-x86_64
  script:
    - ./make.sh clean hdf5
  artifacts:
    paths:
      - kharma.*
      - make_args

#Run all tests in parallel
tests:
  stage: tests
  script:
    - cd tests/$TEST
    - ./run.sh
  parallel:
    matrix:
      - TEST: [bondi, bondi_viscous, bz_monopole, emhdmodes, mhdmodes, noh, regrid, reinit, restart, tilt_init, torus_sanity]

# Continuous Integration testing for KHARMA
# a.k.a did we break the basics?

# Build on Nvidia image.
# Can pretty easily change this out, with changes to build
# Someday we'll build & push a KHARMA image, then test that
image: nvcr.io/nvidia/nvhpc:24.5-devel-cuda12.4-rockylinux9

variables:
  OMP_NUM_THREADS: 8
  OMP_PROC_BIND: "false"
  MPI_EXE: mpirun
  MPI_NUM_PROCS: 2
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  GIT_SUBMODULE_STRATEGY: recursive
  MAMBA_ROOT_PREFIX: /mamba
  MAMBA_URL: https://micro.mamba.pm/api/micromamba/linux-64/latest

### DEFAULT TEST BEHAVIOR ###
default:
  tags:
    - public-kharma-gpu
  # Be default: install pyharm, then run test in cwd
  # For new tests, write one run.sh script which runs/verifies
  # interleaved, and prints a summary of results.
  before_script:
    - export PATH="$HOME/.local/bin:$PATH"
    - eval "$(bin/micromamba shell hook -s posix)"
    - git clone -b dev https://github.com/AFD-Illinois/pyharm.git /pyharm
    - micromamba create -y -f /pyharm/environment.yml
    - micromamba activate pyharm
    - cd /pyharm && ./install.sh
    - cd -
  # Always keep logs and plots.  Results should be printed to console!
  artifacts:
    when: always
    paths:
      - tests/*/*.png
      - tests/*/*.txt

# Tests can be executed in parallel,
# but be careful about GPU arch
stages:
  - build
  - tests

# Build, obviously overrides script/artifacts
build:
  stage: build
  variables:
    NPROC: 8
    HOST_ARCH: NATIVE
  before_script:
    - nvidia-smi
    - curl -Ls $MAMBA_URL | tar -xvj bin/micromamba
  script:
    - export PREFIX_PATH=$PWD/external/hdf5
    - ./make.sh clean cuda hdf5
  artifacts:
    paths:
      - kharma.*
      - make_args
      - bin/micromamba

#Run all tests in parallel
tests:
  stage: tests
  script:
    - cd tests/$TEST
    - ./run.sh
  parallel:
    matrix:
      # This should mirror the CPU tests *except* no driven turbulence test!
      # However, NVC++ mis-compiles our EMHD kernels so we do not test the following:
      # anisotropic_conduction, bondi_viscous, conducting_atmosphere, emhdmodes,
      - TEST: [all_pars, bondi, bz_monopole, mhdmodes, mhdmodes_smr, noh,
               regrid, reinit, resize, restart, tilt_init, torus_sanity]
